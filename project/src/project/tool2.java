package project;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.Map;
import java.util.Properties;

import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.dataformat.csv.CsvMapper;
import com.fasterxml.jackson.dataformat.csv.CsvSchema;
import com.sun.org.apache.xerces.internal.impl.xpath.regex.ParseException;

import au.com.bytecode.opencsv.CSVReader;

public class tool2 {

	static String path;
	static String ip;
	static String cpu_id;
	static String start_time;
	static String end_time;
	
	
	public static void main(String[] args) throws ParseException, IOException {
	 	Scanner s = new Scanner(new InputStreamReader(System.in));
		//Enter inputs required to query the data generated by Generator
	 	System.out.println("Enter 1 to QUERY and 2 to EXIT!!");
		String option= s.nextLine();
		if(option.equals("1"))
		{
		System.out.println("Enter directory path:");
		path= s.nextLine();
		System.out.println("Enter IP address:");
		ip= s.nextLine();
		System.out.println("Enter CPU id:");
		cpu_id= s.nextLine();
		System.out.println("Enter start time in format YYYY-MM-DD HH:MM:");
		start_time= s.nextLine();
		System.out.println("Enter end time in format YYYY-MM-DD HH:MM:");
		end_time= s.nextLine();
		String startDateinp[] = start_time.split(" ");
		String startDate = startDateinp[0];
		// create filepath by concatenating the directory and file-name from the date entered by user
		String filePath = path+"\\"+startDate+".csv";
		File file = new File(filePath); 
		String[] start =start_time.split(" ");
		String[] end =end_time.split(" ");
		String startTime = start[1];
		String endTime = end[1];
		try { 
			// Method call to read the contents of file
			List<List<String>> a = readFile(filePath);
			
			// Method call to run the query
			Map a1 = queryGenerator(a, ip, cpu_id, startTime, endTime);
			System.out.println("CPU"+cpu_id+" usage on "+ip+ " :");
			System.out.println(a1);
		}
	    catch (Exception e) { 
	        System.out.println(e);;
	    } 
	}
		// Exit the tool
			else if(option.equals("2")){
			System.exit(0);
		}
}
	// Method to generate the query
	public static Map queryGenerator(List<List<String>> a, String ip, String id, String st, String et)
	{
		// Method takes the Nested List containing contents of CSV file as input along with IP address, CPU id and 
		// starting time as well as ending time and returns Map containing time and usage of the CPU mentioned.
		List<List<String>> result = new ArrayList<>();
		
			List<String> result1 = new ArrayList<String>();
			Map<String, String> hashMap = new HashMap<String, String>();
			Map<String, String> output = new HashMap<String, String>();
   			 for(int z=0; z<a.size(); z++)
			    {
			    List<String> b = a.get(z);
			    	// Extract the required details from CSV data
			    	String ip_add = b.get(0);
			    	//System.out.println(ip_add);
			    	String[] c = ip_add.split(",");
			    	String ip_1 = c[1];
			    	String id_1 = c[2];
			    	String ts = c[0];
			    	try{
			    		
			    // convert UNIX timestamp to Time
					long timestamp = Long.parseLong(ts); 
					java.util.Date time=new java.util.Date((long)timestamp*1000);
					DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm");  
			        String strDate = dateFormat.format(time);  
 
			    	String usage = c[3];

			    	if(ip_1.equals(ip) && id_1.equals(id))
			    	{
			    		 hashMap.put(strDate,usage);
			    		 for (Map.Entry<String,String> values : hashMap.entrySet())  
			    		 {
			    			 String[] t1 = values.getKey().split(" ");
			    			 String myTime = t1[1];
			    			 // Convert String time to LocalTime object for comparing
			    			 LocalTime localTime = LocalTime.parse(myTime, DateTimeFormatter.ofPattern("HH:mm"));
			    			 LocalTime sta = LocalTime.parse(st, DateTimeFormatter.ofPattern("HH:mm"));
			    			 LocalTime end = LocalTime.parse(et, DateTimeFormatter.ofPattern("HH:mm"));
			    			 
			    			 if(localTime.isAfter(sta) && localTime.isBefore(end) || localTime.equals(sta) || localTime.equals(end))
			    			 {
			    				 output.put(values.getKey(),values.getValue());
			    			 }
			    		 }

			    	}
			    	}
			    	catch(Exception e)
			    	{
			    		System.out.println(e);
			    	}
			    }
   			return (HashMap) output;		
	}	

	
	public static List<List<String>> readFile(String csvFileName) throws IOException
	{
		// Method to read contents of CSV file and store it in a nested List
	    String line = null;
	    BufferedReader stream = null;
	    List<List<String>> csvData = new ArrayList<List<String>>();
	    String[] splitted1 = {};
	    try {
	        stream = new BufferedReader(new FileReader(csvFileName));
	        
	        while ((line = stream.readLine()) != null) {
	        	
	            String[] splitted = line.split(" ");
	            
	            for(int i=0; i<splitted.length;i++)
	            {
	            splitted1 = splitted[i].split(",");
	            List<String> dataLine = new ArrayList<String>(splitted1.length);
	            for (String data : splitted)
	                dataLine.add(data);
	            csvData.add(dataLine);
	        }
	            
	        }	        
	    } finally {
	        if (stream != null)
	            stream.close();
	    }
	    
	    return csvData;
	  }
}